
user  www-data;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen 80;
        server_name  securityadviser.org;
	return 301 https://$host$request_uri;
    }

    # HTTPS server
    #
    server {
        listen       443 ssl;
        server_name  securityadviser.org;

         ssl_certificate  /etc/letsencrypt/live/securityadviser.org/cert.pem;
         ssl_certificate_key  /etc/letsencrypt/live/securityadviser.org/privkey.pem;

         ssl_session_cache    shared:SSL:1m;
         ssl_session_timeout  5m;

         ssl_ciphers  HIGH:!aNULL:!MD5;
         ssl_prefer_server_ciphers  on;

         location / {
             root   html;
             index  index.html index.htm;
         }
	 
	 #location = /var/www/html/.well-known/nostr.json {
	 
	 location /.well-known/nostr.json {
		 default_type application/json;
		 add_header 'Access-Control-Allow-Origin' '*';

		 content_by_lua_block {

			 cjson = require "cjson"
                         ngx_var = ngx.var
                         -- Definimos la ruta del archivo JSON
                         json_file_path = "/usr/local/openresty/nginx/html/.well-known/nostr.json"
                         --json_file_path = "/.well-known/nostr.json"


                         -- Leemos el archivo JSON
                         local file = io.open(json_file_path, "r")
                         local content = file:read("*all")
                         file:close()

                         -- Convertimos el contenido del archivo a una tabla LUA
                         local data = cjson.decode(content)

                         -- Obtenemos el nombre de los parámetros GET
                         local name = ngx_var.arg_name

                         -- Buscamos el nombre en la tabla
                         if data.names[name] then
                                -- Si el nombre existe, obtenemos la clave pública
                                local public_key = data.names[name]

                                -- Buscamos los relays asociados a la clave pública
                                local relays = data.relays[public_key]

                                -- si no tengo relays asociados, solo devuelvo el nombre y la clave pública:
                                if relays == nil then
                                    ngx.say(cjson.encode({names = {[name] = public_key}}))
                                else
				                    -- Si tengo relays asociados, devuelvo el nombre, la clave pública y los relays:
                                    -- codificamos a JSON los datos correspondientes
                                    -- local str_result = cjson.encode({names = {[name] = public_key}, relays = {[public_key] = relays}})

                                    -- divido la cadena en dos para forzar un orden correcto en el JSON
                                    local str_names = cjson.encode({names = {[name] = public_key}})
                                    local str_relays = cjson.encode({relays = {[public_key] = relays}})

                                    str_names = str_names:sub(1, -2) -- eliminamos el último carácter de la cadena (la } de names)
                                    str_relays = str_relays:sub(2) -- eliminamos el primer carácter de la cadena (la { de relays)
                                    
                                    -- concatenamos las cadenas en un único json:
                                    local str_result = str_names .. ',' .. str_relays
                                    -- limpiamos la cadena para sustituir las barras escapadas wws:\/\/ por wws://
                                    str_result = string.gsub(str_result, "\\/", "/")
                                    ngx.say(str_result)
                                end
                         else
                                -- Si el nombre no existe, devolvemos json vacío
                                ngx.say(cjson.encode({names = {}}))
                         end
		 }
	 }


     }
    
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
